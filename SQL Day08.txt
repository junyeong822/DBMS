use world;

-- 단일행 서브쿼리 : 서브쿼리의 결과값(튜플)이 1개
select * from city where countrycode = (
select countrycode from city where name = 'seoul');

-- 다중행 서브쿼리 : 서크쿼리의 결과 튜플이 여러개
-- any -> 조건 집합 중 하나라도 만족할 시 참
select * from city where population > any (
select population from city where district = 'New York');

-- all -> 조건 집합 전체를 만족해야 참
select * from city where population > all (
select population from city where district = 'New York');

-- in : 서브쿼리 -> 메인쿼리 
select * from city where name in (
select name from city where countrycode = 'KOR');

-- exists : 메인쿼리 -> 서브쿼리
select * from city where exists (
select * from city where countrycode = 'KOR');

-- 스칼라 (select)
-- 1. 나라 이름과 인구수와 (스칼라 서브쿼리를 활용한 대한민국의 인구수) 조회
select name, population, (
select population from country where name = 'South Korea') as KOR_POP
from country;
-- 2. 도시 이름과 인구수와 (스칼라 서브쿼리를 활용한 서울의 인구수) 조회
select name, population, (
select population from city where name = 'seoul') as SEOUL_POP
from city;

-- 중첩 ( where)
-- 1. 아시아 평균 인구수보다 인구수가 많은 나라를 조회 (>)
select * from country where population > (
select avg(population) from country where continent = 'ASIA');
-- 2. 대한민국에 속한 도시들보다 인구수가 많은 도시를 조회 (all)
select * from city where population > all (
select population from city where countrycode = 'KOR'); 
-- 3. 대한민국과 governmentform이 동일한 나라들 조회 (=)
select * from country where governmentform = (
select governmentform from country where code = 'KOR');

-- 다중 조건(if 여러개)
select if(percentage > 5, 
	if(percentage > 7.5, 'BIG 7.5', 'SMALL 7.5'), # 5보다 큰 상황
	if(percentage > 2.5, 'BIG 2.5', 'SMALL 2.5')) # 5보다 작은 상황
as tmp from countrylanguage;

use Day08;

insert into dept(name) values('SAMPLE');
select * from dept;

-- inner join : 조건이 일치하는 경우에만 조인, 기준이 각 테이블
-- join을 명시하는 방식
select * from emp inner join dept on emp.dept_id = dept.id;
-- join을 명시하지 않는 방식
select * from emp, dept where emp.dept_id = dept.id;

select emp.name AS EMP_NAME, dept.name AS DEPT_NAME from emp,dept
where emp.dept_id = dept.id;

-- left join : 좌측 테이블을 기준으로 조인 연산
select * from dept left join emp on dept.id = emp.dept_id;

-- dept - emp
select * from dept left join emp on dept.id = emp.dept_id
where emp.dept_id is null;

-- inner join 결과
select * from dept left join emp on dept.id = emp.dept_id
where emp.dept_id is not null;

-- right join : 우측 테이블을 기준으로 조인 연산
select * from emp right join dept on emp.dept_id = dept.id;

-- dept - emp
select * from emp right join dept on emp.dept_id = dept.id
where emp.dept_id is null;

-- inner join
select * from emp right join dept on emp.dept_id = dept.id
where emp.dept_id is not null;

insert into emp(name, dept_id) values('SAMPLE', null);

-- union : 합집합, 결과 집합 더하기, 기본적으로 중복을 제거한 결과를 반환
select * from emp where id < 17 # 1~16
union
select * from emp where id > 16; # 17~31

select * from emp where id < 25 # 1~24
union all # 중복을 포함한 결과를 반환
select * from emp where id > 15; # 16~31

-- full outer join : 양측 테이블을 기준으로 잡아서 조인 연산
-- select * from emp full outer join dpet on emp.dept_id = dept.id;
select * from emp left join dept on emp.dept_id = dept.id
union
select * from emp right join dept on emp.dept_id = dept.id;

show tables;

-- girl_group 테이블과 song 테이블을 대상으로 join 실습 진행
-- 1. inner join 결과 반환 -> 2가지 방식 전부 진행
select * from girl_group as gg inner join song as s on gg.hit_song_id = s.id;
select * from girl_group as gg, song as s where gg.hit_song_id = s.id;
-- 2. left join과 right join 결과 반환
select * from girl_group as gg left join song as s on gg.hit_song_id = s.id;
select * from girl_group as gg right join song as s on gg.hit_song_id = s.id;
-- 3. is null 조건을 활용해서 결과 집합끼리 뺄셈을 한 결과 반환
select * from girl_group as gg left join song as s on gg.hit_song_id = s.id
where s.id is null;
select * from girl_group as gg right join song as s on gg.hit_song_id = s.id
where gg.hit_song_id is null;
-- 4. full outer join된 결과 반환
select * from girl_group as gg inner join song as s on gg.hit_song_id = s.id
union
select * from girl_group as gg right join song as s on gg.hit_song_id = s.id;

use classicmodels;
show tables;
-- employess, offices 
select * from employees;
select * from offices;

-- employees -> lastName, firstName, jobTitle
-- offices -> city, country
-- 1. inner join
select lastName, firstName, jobTitle, city, country from employees as e
inner join offices as o on e.officecode = o.officecode;
select lastName, firstName, jobTitle, city, country from employees as e, offices as o
where e.officecode = o.officecode;
-- 2. left join, right join
select lastName, firstName, jobTitle, city, country from employees as e
left join offices as o on e.officecode = o.officecode;
select lastName, firstName, jobTitle, city, country from employees as e
right join offices as o on e.officecode = o.officecode;
-- 3. full outer join
select lastName, firstName, jobTitle, city, country from employees as e
left join offices as o on e.officecode = o.officecode
union
select lastName, firstName, jobTitle, city, country from employees as e
right join offices as o on e.officecode = o.officecode;

use Day08;

-- View : 가상의 테이블
create view EMP_VIEW as
-- as 뒤에 select하고 싶은 조회 쿼리를 작성하면 그 쿼리를 토대로 View 생성
select name, regdate from emp;

select * from EMP_VIEW;

drop view EMP_VIEW; # view 삭제

select emp.name as EMP_NAME, emp.regdate as EMP_DATE, dept.name as DEPT_NAME
from emp, dept where emp.dept_id = dept.id;

create view EMP_DEPT as
select emp.name as EMP_NAME, emp.regdate as EMP_DATE, dept.name as DEPT_NAME
from emp, dept where emp.dept_id = dept.id;

select * from EMP_DEPT;
select EMP_NAME from EMP_DEPT;
select EMP_NAME from EMP_DEPT where EMP_NAME like ('E%');
select * from EMP_DEPT where EMP_NAME like ('E%');

select emp.name as EMP_NAME, emp.regdate as EMP_DATE, dept.name as DEPT_NAME
from emp, dept where emp.dept_id = dept.id and emp.name like ('E%');

create table family ( # 부양가족 수 테이블
	emp_id int,
    dep int,
    foreign key(emp_id) references emp(id));
    
insert into family values(1, 4);

-- 3개의 테이블에서 조인된 결과
select * from emp, dept, family where
emp.dept_id = dept.id and emp.id = family.emp_id;

select emp.name as EMP_NAME, dept.name as DEPT_NAME, dep as DEP
from emp, dept, family where
emp.dept_id = dept.id and emp.id = family.emp_id and emp.name like ('Aaron');

create view EMP_FAMILY as
select emp.name as EMP_NAME, dept.name as DEPT_NAME, dep as DEP
from emp, dept, family where
emp.dept_id = dept.id and emp.id = family.emp_id;

select * from EMP_FAMILY where EMP_NAME like ('Aaron');

use world;

-- 아시아에 속한 도시의 이름과 인구수를 알 수 있는 ASIA_CITY 뷰 생성
-- CITY_NAME, POP
create view ASIA_CITY as
select city.name as CITY_NAME, city.population as POP from city, country
where city.countrycode = country.code and continent = 'ASIA';

select * from ASIA_CITY where CITY_NAME like ('seoul');

-- 나라 이름과 해당 나라가 사용하는 언어를 볼 수 있는 COUNTRY_LANG 뷰 생성
-- NAME, LANG
create view COUNTRY_LANG as
select name as NAME, language as LANG from country as c, countrylanguage as cl
where c.code = cl.countrycode;

select * from COUNTRY_LANG;
select * from COUNTRY_LANG where LANG like ('%Korea%'); 